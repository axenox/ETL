{
    "object_alias": "exface.Core.UXON_PRESET",
    "columns": [
        {
            "name": "CREATED_ON",
            "attribute_alias": "CREATED_ON"
        },
        {
            "name": "MODIFIED_ON",
            "attribute_alias": "MODIFIED_ON"
        },
        {
            "name": "CREATED_BY_USER",
            "attribute_alias": "CREATED_BY_USER"
        },
        {
            "name": "MODIFIED_BY_USER",
            "attribute_alias": "MODIFIED_BY_USER"
        },
        {
            "name": "UID",
            "attribute_alias": "UID"
        },
        {
            "name": "APP",
            "attribute_alias": "APP"
        },
        {
            "name": "NAME",
            "attribute_alias": "NAME"
        },
        {
            "name": "DESCRIPTION",
            "attribute_alias": "DESCRIPTION"
        },
        {
            "name": "PROTOTYPE",
            "attribute_alias": "PROTOTYPE"
        },
        {
            "name": "UXON",
            "attribute_alias": "UXON"
        },
        {
            "name": "WRAP_PATH",
            "attribute_alias": "WRAP_PATH"
        },
        {
            "name": "UXON_SCHEMA",
            "attribute_alias": "UXON_SCHEMA"
        },
        {
            "name": "THUMBNAIL",
            "attribute_alias": "THUMBNAIL"
        }
    ],
    "rows": [
        {
            "CREATED_ON": "2021-04-26 11:30:26",
            "MODIFIED_ON": "2021-04-26 11:50:33",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11eba2a408cc5548a2a4025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Incremental data sheet transfer",
            "DESCRIPTION": "If you want each run to read only those records that have changed since the last (successful) run, define a filter for the `from_data_sheet` over from-object attributes that indicate a change. Use the `[#last_run_increment_value#]` placeholder as value in the filter - it will be replaced by the date-time of the previous successful run of this step.",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/DataSheetTransfer.php",
            "UXON": {
                "step_run_uid_attribute": "\/\/ REPLACE WITH ALIAS OF RUN-UID-ATTRIBUTE OF TO-OBJECT",
                "from_data_sheet": {
                    "filters": {
                        "operator": "AND",
                        "conditions": [
                            {
                                "expression": "\/\/ REPLACE WITH ALIAS OF A MONOTONIC ATTRIBUTE",
                                "comparator": ">=",
                                "value": "[#last_run_increment_value#]",
                                "object_alias": "sfckoenig.PRM.purch_order"
                            },
                            {
                                "expression": "\/\/ REPLACE WITH ALIAS OF UPDATE-DATE-ATTRIBUTE",
                                "comparator": ">=",
                                "value": "[#last_run_increment_value#]",
                                "object_alias": "sfckoenig.PRM.purch_order"
                            }
                        ]
                    }
                },
                "mapper": {
                    "from_object_alias": "",
                    "column_to_column_mappings": [
                        {
                            "from": "",
                            "to": ""
                        },
                        {
                            "from": "",
                            "to": ""
                        }
                    ]
                }
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2021-04-26 11:44:15",
            "MODIFIED_ON": "2021-04-26 11:44:15",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ebb1a4f6e2b56eb1a4025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Complete data sheet transfer (not incremental)",
            "DESCRIPTION": "Will read all data of the from-object using the respective query builder, map it to the to-object (similarly to a actions `input_mapper`) and save it. \n\nIf the to-object has a unique identifier, use `update_if_matching_attribute` to update rows with existing IDs.",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/DataSheetTransfer.php",
            "UXON": {
                "step_run_uid_attribute": "\/\/ REPLACE WITH ALIAS OF RUN-UID-ATTRIBUTE OF TO-OBJECT (RECOMMENDED!!!)",
                "mapper": {
                    "column_to_column_mappings": [
                        {
                            "from": "",
                            "to": ""
                        },
                        {
                            "from": "",
                            "to": ""
                        }
                    ]
                },
                "update_if_matching_attributes": [
                    ""
                ]
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2021-04-26 11:50:17",
            "MODIFIED_ON": "2021-04-26 11:50:17",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ebbe9dced11312be9d025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Complete data sheet transfer with paging",
            "DESCRIPTION": "Use `page_size` to make multiple read requests each limited in size. How big the `page_size` can be depends on the data source. Only use paging if necessary! \n\n**WARNING:** Paged reads may result in inconsistent data! \n- Make sure to sort monotonically to prevent records from appearing on multiple pages \n- Read a times when changes in the source are unlikely",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/DataSheetTransfer.php",
            "UXON": {
                "step_run_uid_attribute": "\/\/ REPLACE WITH ALIAS OF RUN-UID-ATTRIBUTE OF TO-OBJECT",
                "page_size": 10000,
                "from_data_sheet": {
                    "sorters": [
                        {
                            "attribute_alias": "\/\/ REPLACE WITH ALIAS OF A MONOTONIC ATTRIBUTE OF FROM-OBJECT",
                            "direction": "ASC"
                        }
                    ]
                },
                "mapper": {
                    "from_object_alias": "",
                    "column_to_column_mappings": [
                        {
                            "from": "",
                            "to": ""
                        },
                        {
                            "from": "",
                            "to": ""
                        }
                    ]
                }
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2021-04-26 12:21:47",
            "MODIFIED_ON": "2021-05-10 10:35:50",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ebb03b34d20f00b03b025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Lookup surrogate keys via T-SQL (if NULL)",
            "DESCRIPTION": "Simple SQL to lookup for foreign (surrogate) keys in the to-object by searching for a `name` in the from-object. Replace `key_of_something`, `name_of_something` and `name` (the latter in the from-table!) as needed.",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/SQLRunner.php",
            "UXON": {
                "sql": "UPDATE [#to_object_address#] SET \n    EtlRunUidUpdate = [#step_run_uid#],\n    key_of_something = (\n        SELECT \n            f.id \n        FROM [#from_object_address#] f \n        WHERE name_of_something = f.name\n    )\nWHERE key_of_something IS NULL;"
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2021-04-26 12:32:18",
            "MODIFIED_ON": "2021-04-26 12:32:18",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11eba811ad1c1ed2a811025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Incremental SQL Server MERGE",
            "DESCRIPTION": "Using `column_mappings` of the special MsSQLMerge prototype produces better readable step configs, than a hand written MERGE statement in an SQLRunner prototype. You will probably still end up customizing your `sql`, but using prototypes will make it much more readable giving focus the the overall logic of the query.\n\nThis example shows a MERGE statement with a time based increment value. Replace `EtlRunUidUpdate`, `EtlRunUidCreate`, `srcKeyCol` and `targetKeyCol` with corresponding column names in your tables. Placeholder enclosed in `[#``#]` will be replaced automatically. ",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/MsSQLMerge.php",
            "UXON": {
                "sql_to_get_current_increment_value": "SELECT GETDATE();",
                "column_mappings": [
                    {
                        "from": "",
                        "to": ""
                    },
                    {
                        "from": "",
                        "to": ""
                    }
                ],
                "sql": "MERGE [#to_object_address#] [#target#] \n    USING (\n    \tSELECT \n        \t*\n        \tFROM (\n        \t\tSELECT\n        \t\t  [#source_columns#]\n        \t\t  , EtlCreatedOn\n        \t\t  , row_number() over(partition by srcKeyCol ORDER BY [EtlCreatedOn] DESC) as rn\n        \t\t  FROM [#from_object_address#]\n        \t\t  WHERE \n        \t\t    EtlCreatedOn >= ( CASE WHEN '[#last_run_increment_value#]' != '' THEN '[#last_run_increment_value#]' ELSE '1970-01-01' END )\n        \t) AS tmp\n        WHERE rn = 1\n    ) [#source#]\n    ON ([#source#].srcKeyCol = [#target#].targetKeyCol)\n    WHEN MATCHED\n        THEN UPDATE SET \n            [#update_pairs#],\n            [#target#].EtlRunUidUpdate = [#step_run_uid#]\n    WHEN NOT MATCHED\n        THEN INSERT ([#insert_columns#], EtlRunUidCreate)\n             VALUES ([#insert_values#], [#step_run_uid#]);"
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2021-05-10 10:33:01",
            "MODIFIED_ON": "2021-05-10 10:36:07",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ebaa8754f197b4aa87025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Lookup surrogate keys via MySQL (if NULL)",
            "DESCRIPTION": "Simple SQL to lookup for foreign (surrogate) keys in to-object by searching for a `name` in from-object. Replace `something_name`, `something_id` and `name` (the latter in the from-table!) as needed.",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/SQLRunner.php",
            "UXON": {
                "sql": "UPDATE [#to_object_address#] t SET \n    updated_by_etl_step_oid = [#step_run_uid#],\n    updated_on = NOW(),\n    something_id = (\n        SELECT \n            f.id \n        FROM [#from_object_address#] f\n        WHERE f.name = t.something_name\n    )\nWHERE t.something_id IS NULL;"
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2021-07-06 10:21:01",
            "MODIFIED_ON": "2021-07-06 10:21:01",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11eb9da719db256e9da7025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Simple SQL Server MERGE",
            "DESCRIPTION": "Using `column_mappings` of the special MsSQLMerge prototype produces better readable step configs, than a hand written MERGE statement in an SQLRunner prototype.\n\nThis example shows a simple MERGE comparing two column in the `[#source#]` and `[#target#]` tables.",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/MsSQLMerge.php",
            "UXON": {
                "column_mappings": [
                    {
                        "from": "",
                        "to": ""
                    },
                    {
                        "from": "",
                        "to": ""
                    }
                ],
                "sql_merge_on_condition": "[#source#].col11 = [#target#].col21 AND [#source#].col12= [#target#].col22"
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2023-12-18 08:54:15",
            "MODIFIED_ON": "2023-12-18 08:58:05",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ee9c6fa41963409c6f025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "OpenAPI 3.0.3 document",
            "DESCRIPTION": "Base template for an OpenAPI.json with a single route",
            "PROTOTYPE": "",
            "UXON": {
                "openapi": "3.0.3",
                "info": {
                    "title": "",
                    "description": "",
                    "version": "1.0.0"
                },
                "servers": [
                    {
                        "url": ""
                    }
                ],
                "tags": [
                    {
                        "name": "",
                        "description": ""
                    }
                ],
                "paths": {
                    "\/\/ REPLACE with your\/route": {
                        "get": {
                            "tags": [
                                ""
                            ],
                            "description": "",
                            "operationId": "\/\/ e.g. yourroute (without the slashes)",
                            "parameters": [],
                            "responses": {
                                "200": {
                                    "description": "",
                                    "content": {
                                        "application\/json": {
                                            "schema": {
                                                "$ref": "\/\/ name of the schema - see $.components.schemas"
                                            },
                                            "examples": {
                                                "standard": {
                                                    "summary": ""
                                                },
                                                "#defaultResponse": {
                                                    "summary": "",
                                                    "value": {
                                                        "": ""
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "components": {
                    "schemas": {
                        "": {
                            "type": "object",
                            "properties": {
                                "": ""
                            }
                        }
                    }
                }
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\OpenAPISchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2023-12-18 08:57:28",
            "MODIFIED_ON": "2023-12-18 08:58:41",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ee966217b77db49662025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Query parameter - date",
            "DESCRIPTION": "",
            "PROTOTYPE": "",
            "UXON": {
                "name": "",
                "in": "query",
                "description": "",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "date",
                    "example": "2023-01-30"
                }
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\OpenAPISchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2023-12-18 08:58:34",
            "MODIFIED_ON": "2023-12-18 08:58:52",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11eea6063e51b714a606025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Query parameter - number",
            "DESCRIPTION": "",
            "PROTOTYPE": "",
            "UXON": {
                "name": "",
                "in": "query",
                "description": "",
                "required": true,
                "schema": {
                    "type": "number",
                    "example": 1.5
                }
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\OpenAPISchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2024-05-06 15:32:17",
            "MODIFIED_ON": "2024-05-06 15:32:17",
            "CREATED_BY_USER": "0x31000000000000000000000000000000",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ef80190e9704708019025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "Custom SQL statement",
            "DESCRIPTION": "",
            "PROTOTYPE": "axenox\/etl\/ETLPrototypes\/SQLRunner.php",
            "UXON": {
                "sql": ""
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\ETLPrototypeSchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2024-05-22 15:16:33",
            "MODIFIED_ON": "2024-05-22 15:16:33",
            "CREATED_BY_USER": "0x11e8fe1c902c8ebea23ee4b318306b9a",
            "MODIFIED_BY_USER": "0x11e8fe1c902c8ebea23ee4b318306b9a",
            "UID": "0x11ef927082f249d29270025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "OpenAPI 3.0.3 Import",
            "DESCRIPTION": "Base template for an OpenAPI Import with a single route",
            "PROTOTYPE": "",
            "UXON": {
                "openapi": "3.0.3",
                "info": {
                    "title": "Import",
                    "description": "",
                    "version": "1.0.0"
                },
                "servers": [],
                "tags": [
                    {
                        "name": "Objekte",
                        "description": "\u00dcbermittlung von allen Objekten zu OneLink."
                    }
                ],
                "paths": {
                    "\/import": {
                        "post": {
                            "tags": [
                                "Objekte"
                            ],
                            "description": "Route zum Upload von Objekt-Daten GIS zu OneLink.",
                            "parameters": [],
                            "requestBody": {
                                "description": "Die zu importierenden Daten im Json format.",
                                "required": true,
                                "content": {
                                    "application\/json": {
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "Objekte": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#\/components\/schemas\/Object"
                                                    },
                                                    "x-object-alias": "full.namespace.object"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "responses": {
                                "200": {
                                    "description": "Die Daten wurden erfolgreich hochgeladen."
                                }
                            }
                        }
                    }
                },
                "components": {
                    "schemas": {
                        "Object": {
                            "type": "object",
                            "x-object-alias": "full.namespace.object",
                            "properties": {
                                "prop1": {
                                    "type": "integer",
                                    "x-attribute-alias": "prop1alias"
                                },
                                "prop2": {
                                    "type": "string",
                                    "x-attribute-alias": "prop2alias"
                                }
                            }
                        }
                    }
                }
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\OpenAPISchema",
            "THUMBNAIL": ""
        },
        {
            "CREATED_ON": "2024-05-22 15:21:54",
            "MODIFIED_ON": "2024-09-09 16:59:13",
            "CREATED_BY_USER": "0x11e8fe1c902c8ebea23ee4b318306b9a",
            "MODIFIED_BY_USER": "0x31000000000000000000000000000000",
            "UID": "0x11ef85f541f8fa8885f5025041000001",
            "APP": "0x11ebbc50679eacdabc50025041000001",
            "NAME": "OpenAPI 3.0.3 Export",
            "DESCRIPTION": "Base template for an OpenAPI Export with a single route",
            "PROTOTYPE": "",
            "UXON": {
                "openapi": "3.0.3",
                "info": {
                    "title": "",
                    "description": "",
                    "version": "1.0.0"
                },
                "servers": [],
                "tags": [
                    {
                        "name": "Data",
                        "description": "Export data"
                    }
                ],
                "paths": {
                    "\/object": {
                        "get": {
                            "tags": [
                                "Daten"
                            ],
                            "description": "Liefert Daten aus Onelink.",
                            "parameters": [
                                {
                                    "name": "limit",
                                    "in": "query",
                                    "description": "Limit the maximum number of rows to be included in one response",
                                    "required": false,
                                    "schema": {
                                        "type": "integer",
                                        "example": 100
                                    }
                                },
                                {
                                    "name": "offset",
                                    "in": "query",
                                    "description": "Skip ",
                                    "required": false,
                                    "schema": {
                                        "type": "integer",
                                        "example": 0
                                    }
                                }
                            ],
                            "responses": {
                                "200": {
                                    "description": "Successfull response",
                                    "content": {
                                        "application\/json": {
                                            "schema": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "objects": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#\/components\/schemas\/Object"
                                                            },
                                                            "x-object-alias": "my.APP.OBJECT_ALIAS"
                                                        },
                                                        "page_limit": {
                                                            "type": "integer",
                                                            "nullable": true,
                                                            "x-placeholder": "[#~parameter:limit#]"
                                                        },
                                                        "page_offset": {
                                                            "type": "integer",
                                                            "nullable": true,
                                                            "x-placeholder": "[#~parameter:offset#]"
                                                        }
                                                    }
                                                }
                                            },
                                            "examples": {
                                                "standard": {
                                                    "summary": "Antwort mit Daten"
                                                },
                                                "defaultResponse": {
                                                    "summary": "Antwort ohne Daten",
                                                    "value": {
                                                        "tranchen": [],
                                                        "page_limit": null,
                                                        "page_offset": null
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "components": {
                    "schemas": {
                        "Object": {
                            "type": "object",
                            "x-object-alias": "my.APP.OBJECT_ALIAS",
                            "properties": {
                                "prop1": {
                                    "type": "integer",
                                    "x-attribute-alias": ""
                                },
                                "prop2": {
                                    "type": "string",
                                    "x-attribute-alias": ""
                                }
                            }
                        }
                    }
                }
            },
            "WRAP_PATH": "",
            "UXON_SCHEMA": "\\axenox\\ETL\\Uxon\\OpenAPISchema",
            "THUMBNAIL": ""
        }
    ],
    "totals_rows": [],
    "filters": {
        "operator": "AND",
        "base_object_alias": "exface.Core.UXON_PRESET",
        "conditions": [
            {
                "expression": "APP",
                "comparator": "=",
                "value": "0x11ebbc50679eacdabc50025041000001",
                "object_alias": "exface.Core.UXON_PRESET"
            }
        ]
    },
    "rows_limit": null,
    "rows_offset": 0,
    "sorters": [
        {
            "attribute_alias": "CREATED_ON",
            "direction": "ASC"
        },
        {
            "attribute_alias": "UID",
            "direction": "ASC"
        }
    ]
}